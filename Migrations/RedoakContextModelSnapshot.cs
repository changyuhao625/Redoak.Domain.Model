// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Redoak.Domain.Model.Models;
using System;

namespace Redoak.Domain.Model.Migrations
{
    [DbContext(typeof(RedoakContext))]
    partial class RedoakContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Redoak.Domain.Model.Models.AspNetRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Redoak.Domain.Model.Models.AspNetRoles", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Redoak.Domain.Model.Models.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Redoak.Domain.Model.Models.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Redoak.Domain.Model.Models.AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Redoak.Domain.Model.Models.AspNetUsers", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Redoak.Domain.Model.Models.AspNetUserTokens", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Redoak.Domain.Model.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("RegionId");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Redoak.Domain.Model.Models.Goods", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<int>("GoodsCategoryId");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("GoodsCategoryId");

                    b.ToTable("Goods");
                });

            modelBuilder.Entity("Redoak.Domain.Model.Models.GoodsCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("GoodsCategory");
                });

            modelBuilder.Entity("Redoak.Domain.Model.Models.GoodsSpec", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<int>("GoodsId");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("GoodsId");

                    b.ToTable("GoodsSpec");
                });

            modelBuilder.Entity("Redoak.Domain.Model.Models.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Purchase");
                });

            modelBuilder.Entity("Redoak.Domain.Model.Models.PurchaseOrder", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GoodsSpecId");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("PurchaseId");

                    b.Property<double>("Quantity")
                        .HasColumnType("decimal");

                    b.Property<int>("SupplierId");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("money");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("GoodsSpecId");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaseOrder");
                });

            modelBuilder.Entity("Redoak.Domain.Model.Models.Quotation", b =>
                {
                    b.Property<int>("GoodsSpecId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProposeDate")
                        .HasColumnType("datetime");

                    b.Property<double>("Price")
                        .HasColumnType("money");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("varchar(10)");

                    b.HasKey("GoodsSpecId", "ProposeDate");

                    b.ToTable("Quotation");
                });

            modelBuilder.Entity("Redoak.Domain.Model.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ParentRegionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("Redoak.Domain.Model.Models.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Sale");
                });

            modelBuilder.Entity("Redoak.Domain.Model.Models.SalesOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CustomerId");

                    b.Property<int>("GoodsSpecId");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(400)");

                    b.Property<double>("Quantity")
                        .HasColumnType("decimal");

                    b.Property<int>("SaleId");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("money");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("GoodsSpecId");

                    b.HasIndex("SaleId");

                    b.ToTable("SalesOrder");
                });

            modelBuilder.Entity("Redoak.Domain.Model.Models.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("Redoak.Domain.Model.Models.AspNetRoleClaims", b =>
                {
                    b.HasOne("Redoak.Domain.Model.Models.AspNetRoles", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Redoak.Domain.Model.Models.AspNetUserClaims", b =>
                {
                    b.HasOne("Redoak.Domain.Model.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Redoak.Domain.Model.Models.AspNetUserLogins", b =>
                {
                    b.HasOne("Redoak.Domain.Model.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Redoak.Domain.Model.Models.AspNetUserRoles", b =>
                {
                    b.HasOne("Redoak.Domain.Model.Models.AspNetRoles", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Redoak.Domain.Model.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Redoak.Domain.Model.Models.Customer", b =>
                {
                    b.HasOne("Redoak.Domain.Model.Models.Region", "Region")
                        .WithMany("Customers")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Redoak.Domain.Model.Models.Goods", b =>
                {
                    b.HasOne("Redoak.Domain.Model.Models.GoodsCategory", "Category")
                        .WithMany("Goods")
                        .HasForeignKey("GoodsCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Redoak.Domain.Model.Models.GoodsSpec", b =>
                {
                    b.HasOne("Redoak.Domain.Model.Models.Goods", "Goods")
                        .WithMany("GoodsSpecs")
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Redoak.Domain.Model.Models.PurchaseOrder", b =>
                {
                    b.HasOne("Redoak.Domain.Model.Models.GoodsSpec", "Spec")
                        .WithMany()
                        .HasForeignKey("GoodsSpecId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Redoak.Domain.Model.Models.Purchase", "Purchase")
                        .WithMany()
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Redoak.Domain.Model.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Redoak.Domain.Model.Models.Quotation", b =>
                {
                    b.HasOne("Redoak.Domain.Model.Models.GoodsSpec", "Spec")
                        .WithMany()
                        .HasForeignKey("GoodsSpecId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Redoak.Domain.Model.Models.SalesOrder", b =>
                {
                    b.HasOne("Redoak.Domain.Model.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Redoak.Domain.Model.Models.GoodsSpec", "Spec")
                        .WithMany()
                        .HasForeignKey("GoodsSpecId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Redoak.Domain.Model.Models.Sale", "Sale")
                        .WithMany()
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
